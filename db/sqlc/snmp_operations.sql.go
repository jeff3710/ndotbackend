// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: snmp_operations.sql

package db

import (
	"context"
)

const createSnmpTemplateBase = `-- name: CreateSnmpTemplateBase :one
INSERT INTO snmp_template (
  name, user_id, protocol, version, device_count, description
) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateSnmpTemplateBaseParams struct {
	Name        string `json:"name"`
	UserID      int32  `json:"user_id"`
	Protocol    string `json:"protocol"`
	Version     string `json:"version"`
	DeviceCount int32  `json:"device_count"`
	Description string `json:"description"`
}

// CreateSnmpTemplateBase creates a new SNMP template base record
// and returns the newly created template ID
func (q *Queries) CreateSnmpTemplateBase(ctx context.Context, arg CreateSnmpTemplateBaseParams) (int32, error) {
	row := q.db.QueryRow(ctx, createSnmpTemplateBase,
		arg.Name,
		arg.UserID,
		arg.Protocol,
		arg.Version,
		arg.DeviceCount,
		arg.Description,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createSnmpV2Template = `-- name: CreateSnmpV2Template :exec
INSERT INTO snmpv2_parameters (
  template_id, port, read_community, write_community, trap_community, 
  timeout, poll_interval, retries
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
`

type CreateSnmpV2TemplateParams struct {
	TemplateID     int32  `json:"template_id"`
	Port           int32  `json:"port"`
	ReadCommunity  string `json:"read_community"`
	WriteCommunity string `json:"write_community"`
	TrapCommunity  string `json:"trap_community"`
	Timeout        int32  `json:"timeout"`
	PollInterval   int32  `json:"poll_interval"`
	Retries        int32  `json:"retries"`
}

// CreateSnmpV2Template creates SNMP v2c specific parameters
func (q *Queries) CreateSnmpV2Template(ctx context.Context, arg CreateSnmpV2TemplateParams) error {
	_, err := q.db.Exec(ctx, createSnmpV2Template,
		arg.TemplateID,
		arg.Port,
		arg.ReadCommunity,
		arg.WriteCommunity,
		arg.TrapCommunity,
		arg.Timeout,
		arg.PollInterval,
		arg.Retries,
	)
	return err
}

const createSnmpV3Template = `-- name: CreateSnmpV3Template :exec
INSERT INTO snmpv3_parameters (
  template_id, port, security_level, auth_protocol, auth_password, 
  priv_protocol, priv_password, v3_user, engine_id, 
  timeout, poll_interval, retries
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
`

type CreateSnmpV3TemplateParams struct {
	TemplateID    int32  `json:"template_id"`
	Port          int32  `json:"port"`
	SecurityLevel string `json:"security_level"`
	AuthProtocol  string `json:"auth_protocol"`
	AuthPassword  string `json:"auth_password"`
	PrivProtocol  string `json:"priv_protocol"`
	PrivPassword  string `json:"priv_password"`
	V3User        string `json:"v3_user"`
	EngineID      string `json:"engine_id"`
	Timeout       int32  `json:"timeout"`
	PollInterval  int32  `json:"poll_interval"`
	Retries       int32  `json:"retries"`
}

// CreateSnmpV3Template creates SNMP v3 specific parameters
func (q *Queries) CreateSnmpV3Template(ctx context.Context, arg CreateSnmpV3TemplateParams) error {
	_, err := q.db.Exec(ctx, createSnmpV3Template,
		arg.TemplateID,
		arg.Port,
		arg.SecurityLevel,
		arg.AuthProtocol,
		arg.AuthPassword,
		arg.PrivProtocol,
		arg.PrivPassword,
		arg.V3User,
		arg.EngineID,
		arg.Timeout,
		arg.PollInterval,
		arg.Retries,
	)
	return err
}

const deleteSnmpTemplateBase = `-- name: DeleteSnmpTemplateBase :exec
DELETE FROM snmp_template
WHERE id = $1
`

func (q *Queries) DeleteSnmpTemplateBase(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSnmpTemplateBase, id)
	return err
}

const deleteSnmpV2Parameters = `-- name: DeleteSnmpV2Parameters :exec
DELETE FROM snmpv2_parameters
WHERE template_id = $1
`

func (q *Queries) DeleteSnmpV2Parameters(ctx context.Context, templateID int32) error {
	_, err := q.db.Exec(ctx, deleteSnmpV2Parameters, templateID)
	return err
}

const deleteSnmpV3Parameters = `-- name: DeleteSnmpV3Parameters :exec
DELETE FROM snmpv3_parameters
WHERE template_id = $1
`

func (q *Queries) DeleteSnmpV3Parameters(ctx context.Context, templateID int32) error {
	_, err := q.db.Exec(ctx, deleteSnmpV3Parameters, templateID)
	return err
}

const getSnmpTemplateBase = `-- name: GetSnmpTemplateBase :one
SELECT 
  id, name, user_id, protocol, version, description,
  device_count, created_at, updated_at
FROM snmp_template
WHERE id = $1
`

// GetSnmpTemplateBase retrieves base SNMP template information
func (q *Queries) GetSnmpTemplateBase(ctx context.Context, id int32) (SnmpTemplate, error) {
	row := q.db.QueryRow(ctx, getSnmpTemplateBase, id)
	var i SnmpTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Protocol,
		&i.Version,
		&i.Description,
		&i.DeviceCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSnmpV2Parameters = `-- name: GetSnmpV2Parameters :one
SELECT 
  id, port, read_community, write_community, trap_community,
  timeout, poll_interval, retries
FROM snmpv2_parameters
WHERE template_id = $1
`

type GetSnmpV2ParametersRow struct {
	ID             int32  `json:"id"`
	Port           int32  `json:"port"`
	ReadCommunity  string `json:"read_community"`
	WriteCommunity string `json:"write_community"`
	TrapCommunity  string `json:"trap_community"`
	Timeout        int32  `json:"timeout"`
	PollInterval   int32  `json:"poll_interval"`
	Retries        int32  `json:"retries"`
}

// GetSnmpV2Parameters retrieves SNMP v2c specific parameters
func (q *Queries) GetSnmpV2Parameters(ctx context.Context, templateID int32) (GetSnmpV2ParametersRow, error) {
	row := q.db.QueryRow(ctx, getSnmpV2Parameters, templateID)
	var i GetSnmpV2ParametersRow
	err := row.Scan(
		&i.ID,
		&i.Port,
		&i.ReadCommunity,
		&i.WriteCommunity,
		&i.TrapCommunity,
		&i.Timeout,
		&i.PollInterval,
		&i.Retries,
	)
	return i, err
}

const getSnmpV3Parameters = `-- name: GetSnmpV3Parameters :one
SELECT 
  id, port, security_level, auth_protocol, auth_password,
  priv_protocol, priv_password, v3_user, engine_id,
  timeout, poll_interval, retries
FROM snmpv3_parameters
WHERE template_id = $1
`

type GetSnmpV3ParametersRow struct {
	ID            int32  `json:"id"`
	Port          int32  `json:"port"`
	SecurityLevel string `json:"security_level"`
	AuthProtocol  string `json:"auth_protocol"`
	AuthPassword  string `json:"auth_password"`
	PrivProtocol  string `json:"priv_protocol"`
	PrivPassword  string `json:"priv_password"`
	V3User        string `json:"v3_user"`
	EngineID      string `json:"engine_id"`
	Timeout       int32  `json:"timeout"`
	PollInterval  int32  `json:"poll_interval"`
	Retries       int32  `json:"retries"`
}

// GetSnmpV3Parameters retrieves SNMP v3 specific parameters
func (q *Queries) GetSnmpV3Parameters(ctx context.Context, templateID int32) (GetSnmpV3ParametersRow, error) {
	row := q.db.QueryRow(ctx, getSnmpV3Parameters, templateID)
	var i GetSnmpV3ParametersRow
	err := row.Scan(
		&i.ID,
		&i.Port,
		&i.SecurityLevel,
		&i.AuthProtocol,
		&i.AuthPassword,
		&i.PrivProtocol,
		&i.PrivPassword,
		&i.V3User,
		&i.EngineID,
		&i.Timeout,
		&i.PollInterval,
		&i.Retries,
	)
	return i, err
}

const listSnmpTemplatesBase = `-- name: ListSnmpTemplatesBase :many
SELECT 
  id, name, user_id, protocol, version, description,
  device_count, created_at, updated_at
FROM snmp_template
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSnmpTemplatesBaseParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// ListSnmpTemplatesBase retrieves paginated list of base SNMP template information
func (q *Queries) ListSnmpTemplatesBase(ctx context.Context, arg ListSnmpTemplatesBaseParams) ([]SnmpTemplate, error) {
	rows, err := q.db.Query(ctx, listSnmpTemplatesBase, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SnmpTemplate{}
	for rows.Next() {
		var i SnmpTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Protocol,
			&i.Version,
			&i.Description,
			&i.DeviceCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSnmpV2Parameters = `-- name: ListSnmpV2Parameters :many
SELECT 
  template_id, id, port, read_community, write_community, trap_community,
  timeout, poll_interval, retries
FROM snmpv2_parameters
WHERE template_id = ANY($1::int[])
`

type ListSnmpV2ParametersRow struct {
	TemplateID     int32  `json:"template_id"`
	ID             int32  `json:"id"`
	Port           int32  `json:"port"`
	ReadCommunity  string `json:"read_community"`
	WriteCommunity string `json:"write_community"`
	TrapCommunity  string `json:"trap_community"`
	Timeout        int32  `json:"timeout"`
	PollInterval   int32  `json:"poll_interval"`
	Retries        int32  `json:"retries"`
}

// ListSnmpV2Parameters retrieves SNMP v2c parameters for multiple templates
func (q *Queries) ListSnmpV2Parameters(ctx context.Context, dollar_1 []int32) ([]ListSnmpV2ParametersRow, error) {
	rows, err := q.db.Query(ctx, listSnmpV2Parameters, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSnmpV2ParametersRow{}
	for rows.Next() {
		var i ListSnmpV2ParametersRow
		if err := rows.Scan(
			&i.TemplateID,
			&i.ID,
			&i.Port,
			&i.ReadCommunity,
			&i.WriteCommunity,
			&i.TrapCommunity,
			&i.Timeout,
			&i.PollInterval,
			&i.Retries,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSnmpV3Parameters = `-- name: ListSnmpV3Parameters :many
SELECT 
  template_id, id, port, security_level, auth_protocol, auth_password,
  priv_protocol, priv_password, v3_user, engine_id,
  timeout, poll_interval, retries
FROM snmpv3_parameters
WHERE template_id = ANY($1::int[])
`

type ListSnmpV3ParametersRow struct {
	TemplateID    int32  `json:"template_id"`
	ID            int32  `json:"id"`
	Port          int32  `json:"port"`
	SecurityLevel string `json:"security_level"`
	AuthProtocol  string `json:"auth_protocol"`
	AuthPassword  string `json:"auth_password"`
	PrivProtocol  string `json:"priv_protocol"`
	PrivPassword  string `json:"priv_password"`
	V3User        string `json:"v3_user"`
	EngineID      string `json:"engine_id"`
	Timeout       int32  `json:"timeout"`
	PollInterval  int32  `json:"poll_interval"`
	Retries       int32  `json:"retries"`
}

// ListSnmpV3Parameters retrieves SNMP v3 parameters for multiple templates
func (q *Queries) ListSnmpV3Parameters(ctx context.Context, dollar_1 []int32) ([]ListSnmpV3ParametersRow, error) {
	rows, err := q.db.Query(ctx, listSnmpV3Parameters, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSnmpV3ParametersRow{}
	for rows.Next() {
		var i ListSnmpV3ParametersRow
		if err := rows.Scan(
			&i.TemplateID,
			&i.ID,
			&i.Port,
			&i.SecurityLevel,
			&i.AuthProtocol,
			&i.AuthPassword,
			&i.PrivProtocol,
			&i.PrivPassword,
			&i.V3User,
			&i.EngineID,
			&i.Timeout,
			&i.PollInterval,
			&i.Retries,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSnmpTemplateBase = `-- name: UpdateSnmpTemplateBase :exec
UPDATE snmp_template
SET name = $1,
    protocol = $2,
    version = $3,
    description = $4,
    updated_at = now()
WHERE id = $5
`

type UpdateSnmpTemplateBaseParams struct {
	Name        string `json:"name"`
	Protocol    string `json:"protocol"`
	Version     string `json:"version"`
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateSnmpTemplateBase(ctx context.Context, arg UpdateSnmpTemplateBaseParams) error {
	_, err := q.db.Exec(ctx, updateSnmpTemplateBase,
		arg.Name,
		arg.Protocol,
		arg.Version,
		arg.Description,
		arg.ID,
	)
	return err
}

const updateSnmpV2Parameters = `-- name: UpdateSnmpV2Parameters :exec
UPDATE snmpv2_parameters
SET port = $1,
    read_community = $2,
    write_community = $3,
    trap_community = $4,
    timeout = $5,
    poll_interval = $6,
    retries = $7
WHERE template_id = $8
`

type UpdateSnmpV2ParametersParams struct {
	Port           int32  `json:"port"`
	ReadCommunity  string `json:"read_community"`
	WriteCommunity string `json:"write_community"`
	TrapCommunity  string `json:"trap_community"`
	Timeout        int32  `json:"timeout"`
	PollInterval   int32  `json:"poll_interval"`
	Retries        int32  `json:"retries"`
	TemplateID     int32  `json:"template_id"`
}

func (q *Queries) UpdateSnmpV2Parameters(ctx context.Context, arg UpdateSnmpV2ParametersParams) error {
	_, err := q.db.Exec(ctx, updateSnmpV2Parameters,
		arg.Port,
		arg.ReadCommunity,
		arg.WriteCommunity,
		arg.TrapCommunity,
		arg.Timeout,
		arg.PollInterval,
		arg.Retries,
		arg.TemplateID,
	)
	return err
}

const updateSnmpV3Parameters = `-- name: UpdateSnmpV3Parameters :exec
UPDATE snmpv3_parameters
SET port = $1,
    security_level = $2,
    auth_protocol = $3,
    auth_password = $4,
    priv_protocol = $5,
    priv_password = $6,
    v3_user = $7,
    engine_id = $8,
    timeout = $9,
    poll_interval = $10,
    retries = $11
WHERE template_id = $12
`

type UpdateSnmpV3ParametersParams struct {
	Port          int32  `json:"port"`
	SecurityLevel string `json:"security_level"`
	AuthProtocol  string `json:"auth_protocol"`
	AuthPassword  string `json:"auth_password"`
	PrivProtocol  string `json:"priv_protocol"`
	PrivPassword  string `json:"priv_password"`
	V3User        string `json:"v3_user"`
	EngineID      string `json:"engine_id"`
	Timeout       int32  `json:"timeout"`
	PollInterval  int32  `json:"poll_interval"`
	Retries       int32  `json:"retries"`
	TemplateID    int32  `json:"template_id"`
}

func (q *Queries) UpdateSnmpV3Parameters(ctx context.Context, arg UpdateSnmpV3ParametersParams) error {
	_, err := q.db.Exec(ctx, updateSnmpV3Parameters,
		arg.Port,
		arg.SecurityLevel,
		arg.AuthProtocol,
		arg.AuthPassword,
		arg.PrivProtocol,
		arg.PrivPassword,
		arg.V3User,
		arg.EngineID,
		arg.Timeout,
		arg.PollInterval,
		arg.Retries,
		arg.TemplateID,
	)
	return err
}
