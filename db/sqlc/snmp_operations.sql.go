// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: snmp_operations.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSnmpTemplateBase = `-- name: CreateSnmpTemplateBase :one
INSERT INTO snmp_template (
  name, user_id, protocol, version, device_count, description
)VALUES($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateSnmpTemplateBaseParams struct {
	Name        string `json:"name"`
	UserID      int32  `json:"user_id"`
	Protocol    string `json:"protocol"`
	Version     string `json:"version"`
	DeviceCount int32  `json:"device_count"`
	Description string `json:"description"`
}

func (q *Queries) CreateSnmpTemplateBase(ctx context.Context, arg CreateSnmpTemplateBaseParams) (int64, error) {
	row := q.db.QueryRow(ctx, createSnmpTemplateBase,
		arg.Name,
		arg.UserID,
		arg.Protocol,
		arg.Version,
		arg.DeviceCount,
		arg.Description,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSnmpTemplateWithV2Parameters = `-- name: CreateSnmpTemplateWithV2Parameters :exec
INSERT INTO snmpv2_parameters (
  template_id, port, read_community, write_community, trap_community, timeout, poll_interval, retries
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
`

type CreateSnmpTemplateWithV2ParametersParams struct {
	TemplateID     int32  `json:"template_id"`
	Port           string `json:"port"`
	ReadCommunity  string `json:"read_community"`
	WriteCommunity string `json:"write_community"`
	TrapCommunity  string `json:"trap_community"`
	Timeout        string `json:"timeout"`
	PollInterval   string `json:"poll_interval"`
	Retries        string `json:"retries"`
}

func (q *Queries) CreateSnmpTemplateWithV2Parameters(ctx context.Context, arg CreateSnmpTemplateWithV2ParametersParams) error {
	_, err := q.db.Exec(ctx, createSnmpTemplateWithV2Parameters,
		arg.TemplateID,
		arg.Port,
		arg.ReadCommunity,
		arg.WriteCommunity,
		arg.TrapCommunity,
		arg.Timeout,
		arg.PollInterval,
		arg.Retries,
	)
	return err
}

const createSnmpTemplateWithV3Parameters = `-- name: CreateSnmpTemplateWithV3Parameters :exec
INSERT INTO snmpv3_parameters (
  template_id, port, security_level, auth_protocol, auth_password, priv_protocol, priv_password, v3_user, engine_id, timeout, poll_interval, retries
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
`

type CreateSnmpTemplateWithV3ParametersParams struct {
	TemplateID    int32  `json:"template_id"`
	Port          string `json:"port"`
	SecurityLevel string `json:"security_level"`
	AuthProtocol  string `json:"auth_protocol"`
	AuthPassword  string `json:"auth_password"`
	PrivProtocol  string `json:"priv_protocol"`
	PrivPassword  string `json:"priv_password"`
	V3User        string `json:"v3_user"`
	EngineID      string `json:"engine_id"`
	Timeout       string `json:"timeout"`
	PollInterval  string `json:"poll_interval"`
	Retries       string `json:"retries"`
}

func (q *Queries) CreateSnmpTemplateWithV3Parameters(ctx context.Context, arg CreateSnmpTemplateWithV3ParametersParams) error {
	_, err := q.db.Exec(ctx, createSnmpTemplateWithV3Parameters,
		arg.TemplateID,
		arg.Port,
		arg.SecurityLevel,
		arg.AuthProtocol,
		arg.AuthPassword,
		arg.PrivProtocol,
		arg.PrivPassword,
		arg.V3User,
		arg.EngineID,
		arg.Timeout,
		arg.PollInterval,
		arg.Retries,
	)
	return err
}

const deleteSnmpTemplateWithParameters = `-- name: DeleteSnmpTemplateWithParameters :exec
DELETE FROM snmpv2_parameters
WHERE template_id = $1
`

func (q *Queries) DeleteSnmpTemplateWithParameters(ctx context.Context, templateID int32) error {
	_, err := q.db.Exec(ctx, deleteSnmpTemplateWithParameters, templateID)
	return err
}

const getSnmpTemplateWithParameters = `-- name: GetSnmpTemplateWithParameters :one
SELECT 
  t.id, t.name, t.user_id, t.protocol, t.version, t.description, t.device_count, t.created_at, t.updated_at,
  v2.id, v2.template_id, v2.port, v2.read_community, v2.write_community, v2.trap_community, v2.timeout, v2.poll_interval, v2.retries,
  v3.id, v3.template_id, v3.port, v3.security_level, v3.auth_protocol, v3.auth_password, v3.priv_protocol, v3.priv_password, v3.v3_user, v3.engine_id, v3.timeout, v3.poll_interval, v3.retries
FROM snmp_template t
LEFT JOIN snmpv2_parameters v2 ON v2.template_id = t.id
LEFT JOIN snmpv3_parameters v3 ON v3.template_id = t.id
WHERE t.id = $1
`

type GetSnmpTemplateWithParametersRow struct {
	ID             int64       `json:"id"`
	Name           string      `json:"name"`
	UserID         int32       `json:"user_id"`
	Protocol       string      `json:"protocol"`
	Version        string      `json:"version"`
	Description    string      `json:"description"`
	DeviceCount    int32       `json:"device_count"`
	CreatedAt      time.Time   `json:"created_at"`
	UpdatedAt      time.Time   `json:"updated_at"`
	ID_2           pgtype.Int4 `json:"id_2"`
	TemplateID     pgtype.Int4 `json:"template_id"`
	Port           pgtype.Text `json:"port"`
	ReadCommunity  pgtype.Text `json:"read_community"`
	WriteCommunity pgtype.Text `json:"write_community"`
	TrapCommunity  pgtype.Text `json:"trap_community"`
	Timeout        pgtype.Text `json:"timeout"`
	PollInterval   pgtype.Text `json:"poll_interval"`
	Retries        pgtype.Text `json:"retries"`
	ID_3           pgtype.Int4 `json:"id_3"`
	TemplateID_2   pgtype.Int4 `json:"template_id_2"`
	Port_2         pgtype.Text `json:"port_2"`
	SecurityLevel  pgtype.Text `json:"security_level"`
	AuthProtocol   pgtype.Text `json:"auth_protocol"`
	AuthPassword   pgtype.Text `json:"auth_password"`
	PrivProtocol   pgtype.Text `json:"priv_protocol"`
	PrivPassword   pgtype.Text `json:"priv_password"`
	V3User         pgtype.Text `json:"v3_user"`
	EngineID       pgtype.Text `json:"engine_id"`
	Timeout_2      pgtype.Text `json:"timeout_2"`
	PollInterval_2 pgtype.Text `json:"poll_interval_2"`
	Retries_2      pgtype.Text `json:"retries_2"`
}

func (q *Queries) GetSnmpTemplateWithParameters(ctx context.Context, id int64) (GetSnmpTemplateWithParametersRow, error) {
	row := q.db.QueryRow(ctx, getSnmpTemplateWithParameters, id)
	var i GetSnmpTemplateWithParametersRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Protocol,
		&i.Version,
		&i.Description,
		&i.DeviceCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.TemplateID,
		&i.Port,
		&i.ReadCommunity,
		&i.WriteCommunity,
		&i.TrapCommunity,
		&i.Timeout,
		&i.PollInterval,
		&i.Retries,
		&i.ID_3,
		&i.TemplateID_2,
		&i.Port_2,
		&i.SecurityLevel,
		&i.AuthProtocol,
		&i.AuthPassword,
		&i.PrivProtocol,
		&i.PrivPassword,
		&i.V3User,
		&i.EngineID,
		&i.Timeout_2,
		&i.PollInterval_2,
		&i.Retries_2,
	)
	return i, err
}

const listSnmpTemplatesWithParameters = `-- name: ListSnmpTemplatesWithParameters :many
SELECT 
  t.id, t.name, t.user_id, t.protocol, t.version, t.description, t.device_count, t.created_at, t.updated_at,
  v2.id, v2.template_id, v2.port, v2.read_community, v2.write_community, v2.trap_community, v2.timeout, v2.poll_interval, v2.retries,
  v3.id, v3.template_id, v3.port, v3.security_level, v3.auth_protocol, v3.auth_password, v3.priv_protocol, v3.priv_password, v3.v3_user, v3.engine_id, v3.timeout, v3.poll_interval, v3.retries
FROM snmp_template t
LEFT JOIN snmpv2_parameters v2 ON v2.template_id = t.id
LEFT JOIN snmpv3_parameters v3 ON v3.template_id = t.id
ORDER BY t.id
LIMIT $1
OFFSET $2
`

type ListSnmpTemplatesWithParametersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListSnmpTemplatesWithParametersRow struct {
	ID             int64       `json:"id"`
	Name           string      `json:"name"`
	UserID         int32       `json:"user_id"`
	Protocol       string      `json:"protocol"`
	Version        string      `json:"version"`
	Description    string      `json:"description"`
	DeviceCount    int32       `json:"device_count"`
	CreatedAt      time.Time   `json:"created_at"`
	UpdatedAt      time.Time   `json:"updated_at"`
	ID_2           pgtype.Int4 `json:"id_2"`
	TemplateID     pgtype.Int4 `json:"template_id"`
	Port           pgtype.Text `json:"port"`
	ReadCommunity  pgtype.Text `json:"read_community"`
	WriteCommunity pgtype.Text `json:"write_community"`
	TrapCommunity  pgtype.Text `json:"trap_community"`
	Timeout        pgtype.Text `json:"timeout"`
	PollInterval   pgtype.Text `json:"poll_interval"`
	Retries        pgtype.Text `json:"retries"`
	ID_3           pgtype.Int4 `json:"id_3"`
	TemplateID_2   pgtype.Int4 `json:"template_id_2"`
	Port_2         pgtype.Text `json:"port_2"`
	SecurityLevel  pgtype.Text `json:"security_level"`
	AuthProtocol   pgtype.Text `json:"auth_protocol"`
	AuthPassword   pgtype.Text `json:"auth_password"`
	PrivProtocol   pgtype.Text `json:"priv_protocol"`
	PrivPassword   pgtype.Text `json:"priv_password"`
	V3User         pgtype.Text `json:"v3_user"`
	EngineID       pgtype.Text `json:"engine_id"`
	Timeout_2      pgtype.Text `json:"timeout_2"`
	PollInterval_2 pgtype.Text `json:"poll_interval_2"`
	Retries_2      pgtype.Text `json:"retries_2"`
}

func (q *Queries) ListSnmpTemplatesWithParameters(ctx context.Context, arg ListSnmpTemplatesWithParametersParams) ([]ListSnmpTemplatesWithParametersRow, error) {
	rows, err := q.db.Query(ctx, listSnmpTemplatesWithParameters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSnmpTemplatesWithParametersRow{}
	for rows.Next() {
		var i ListSnmpTemplatesWithParametersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Protocol,
			&i.Version,
			&i.Description,
			&i.DeviceCount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.TemplateID,
			&i.Port,
			&i.ReadCommunity,
			&i.WriteCommunity,
			&i.TrapCommunity,
			&i.Timeout,
			&i.PollInterval,
			&i.Retries,
			&i.ID_3,
			&i.TemplateID_2,
			&i.Port_2,
			&i.SecurityLevel,
			&i.AuthProtocol,
			&i.AuthPassword,
			&i.PrivProtocol,
			&i.PrivPassword,
			&i.V3User,
			&i.EngineID,
			&i.Timeout_2,
			&i.PollInterval_2,
			&i.Retries_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSnmpTemplateWithParameters = `-- name: UpdateSnmpTemplateWithParameters :exec
UPDATE snmp_template
SET name = $1,
    protocol = $2,
    version = $3,
    description = $4,
    updated_at = now()
WHERE id = $5
`

type UpdateSnmpTemplateWithParametersParams struct {
	Name        string `json:"name"`
	Protocol    string `json:"protocol"`
	Version     string `json:"version"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateSnmpTemplateWithParameters(ctx context.Context, arg UpdateSnmpTemplateWithParametersParams) error {
	_, err := q.db.Exec(ctx, updateSnmpTemplateWithParameters,
		arg.Name,
		arg.Protocol,
		arg.Version,
		arg.Description,
		arg.ID,
	)
	return err
}

const updateSnmpTemplateWithV3Parameters = `-- name: UpdateSnmpTemplateWithV3Parameters :exec
UPDATE snmp_template
SET name = $1,
    protocol = $2,
    version = $3,
    description = $4,
    updated_at = now()
WHERE id = $5
`

type UpdateSnmpTemplateWithV3ParametersParams struct {
	Name        string `json:"name"`
	Protocol    string `json:"protocol"`
	Version     string `json:"version"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateSnmpTemplateWithV3Parameters(ctx context.Context, arg UpdateSnmpTemplateWithV3ParametersParams) error {
	_, err := q.db.Exec(ctx, updateSnmpTemplateWithV3Parameters,
		arg.Name,
		arg.Protocol,
		arg.Version,
		arg.Description,
		arg.ID,
	)
	return err
}
